Analysis
This is nothing but a simple elementary addition problem. 
The only difference is that the numbers to be added are represented by linked list where each digit is represented by the nodes of that linked list.
If we see the example then we will see that the digits are in the reverse order i.e.,
First node => ones place
Second node => tens place
Third node => hundreds place
... and so on.
We will have to return a new linked list whose nodes will represent the digits of the sum of the numbers represented by the given two linked list.

Approach
Traverse two linked lists.
In each iteration, add the numbers in the nodes of the linked lists
If the lists are unequal, then the smaller one will end before the longer. In this case, we will put only the remaining nodes of the longer list in the resultant list
If the sum of two digits is greater than 9, then we will have to find out the “carry” to be added in the next iteration.
This is nothing more than a simple addition. The only challenge here might be to avoid NullPointerException which is very common in the linked list based problems.

Time Complexity
Since we are iterating both the lists only once, the time complexity would be O(m + n). 
Here m and n are the numbers of nodes in the two linked lists.
Space Complexity
Since we are using extra space only for our variables, our space complexity would be O(1). 
One might argue that we are using another list to store our result so the space complexity should also be O(m + n). 
But this is the list we are not using for our algorithm, we are using it for the result which is asked in the question (I’d love to know your take on this).

public class AddTwoNumbers {

    private static ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        // Head of the new linked list - this is the head of the resultant list
        ListNode head = null;
        // Reference of head which is null at this point
        ListNode temp = null;
        // Carry
        int carry = 0;
        // Loop for the two lists
        while (l1 != null || l2 != null) {
            // At the start of each iteration, we should add carry from the last iteration
            int sum = carry;
            // Since the lengths of the lists may be unequal, we are checking if the
            // current node is null for one of the lists
            if (l1 != null) {
                sum += l1.val;
                l1 = l1.next;
            }
            if (l2 != null) {
                sum += l2.val;
                l2 = l2.next;
            }
            // At this point, we will add the total sum % 10 to the new node
            // in the resultant list
            ListNode node = new ListNode(sum % 10);
            // Carry to be added in the next iteration
            carry = sum / 10;
            // If this is the first node or head
            if (temp == null) {
                temp = head = node;
            }
            // For any other node
            else {
                temp.next = node;
                temp = temp.next;
            }
        }
        // After the last iteration, we will check if there is carry left
        // If it's left then we will create a new node and add it
        if (carry > 0) {
            temp.next = new ListNode(carry);
        }
        return head;
    }
}

